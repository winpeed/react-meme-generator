{"version":3,"sources":["components/Header.js","components/Main.js","components/Aside.js","components/Container.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Main","props","type","value","topText","name","onChange","enterText","required","bottomText","onClick","getMeme","Aside","src","imgUrl","alt","altText","Container","useState","text","setText","setUrl","setAltText","TopText","event","target","randomNumber","Math","floor","random","fetch","then","response","json","data","memes","url","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAUeA,MARf,WACE,OACE,qBAAKC,UAAU,SAAf,SACE,+D,qBC+BSC,MAlCf,SAAcC,GACZ,OACE,sBAAKF,UAAU,aAAf,UACE,oCACE,8CACA,uBACA,uBACEG,KAAK,OACLC,MAAOF,EAAMG,QACbC,KAAK,UACLC,SAAUL,EAAMM,UAChBC,UAAQ,OAIZ,oCACE,iDACA,uBACA,uBACEN,KAAK,OACLC,MAAOF,EAAMQ,WACbJ,KAAK,aACLC,SAAUL,EAAMM,UAChBC,UAAQ,OAIZ,wBAAQE,QAAST,EAAMU,QAASZ,UAAU,MAA1C,0BCjBSa,MAVf,SAAeX,GACb,OACE,sBAAKF,UAAU,OAAf,UACE,oBAAIA,UAAU,qBAAd,SAAoCE,EAAMG,UAC1C,qBAAKS,IAAKZ,EAAMa,OAAQC,IAAKd,EAAMe,QAASjB,UAAU,aACtD,oBAAIA,UAAU,wBAAd,SAAuCE,EAAMQ,iBCyCpCQ,MA3Cf,WACE,MAAwBC,mBAAS,CAAEd,QAAS,GAAIK,WAAY,KAA5D,mBAAOU,EAAP,KAAaC,EAAb,KACA,EAAyBF,mBAAS,oCAAlC,mBAAOJ,EAAP,KAAeO,EAAf,KACA,EAA8BH,mBAAS,IAAvC,mBAAOF,EAAP,KAAgBM,EAAhB,KAqBA,OACE,sBAAKvB,UAAU,UAAf,UACE,cAAC,EAAD,CACEK,QAASe,EAAKI,QACdhB,UAvBN,SAAmBiB,GACjB,MAAwBA,EAAMC,OAAtBpB,EAAR,EAAQA,KAAMF,EAAd,EAAcA,MAEdiB,EAAQ,2BAAKD,GAAN,kBAAad,EAAOF,MAqBvBM,WAAYU,EAAKV,WACjBE,QAjBN,WACE,IAAMe,EAAeC,KAAKC,MAAsB,IAAhBD,KAAKE,UACrCC,MAJU,qCAKPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLb,EAAOa,EAAKA,KAAKC,MAAMT,GAAcU,KACrCd,EAAWY,EAAKA,KAAKC,MAAMT,GAAcrB,MACzCgC,QAAQC,IAAIJ,EAAKA,KAAKC,MAAMT,GAAcrB,YAa5C,cAAC,EAAD,CACED,QAASe,EAAKf,QACdY,QAASA,EACTP,WAAYU,EAAKV,WACjBK,OAAQA,QC7BDyB,MATf,WACE,OACE,sBAAKxC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.2258b85e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Meme GeneratorðŸ¤ª</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Main(props) {\r\n  return (\r\n    <div className=\"input-area\">\r\n      <section>\r\n        <label>Top Text:</label>\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          value={props.topText}\r\n          name=\"topText\"\r\n          onChange={props.enterText}\r\n          required\r\n        />\r\n      </section>\r\n\r\n      <section>\r\n        <label>Bottom Text:</label>\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          value={props.bottomText}\r\n          name=\"bottomText\"\r\n          onChange={props.enterText}\r\n          required\r\n        />\r\n      </section>\r\n\r\n      <button onClick={props.getMeme} className=\"btn\">\r\n        Generate\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nfunction Aside(props) {\r\n  return (\r\n    <div className=\"meme\">\r\n      <h2 className=\"meme-text meme-top\">{props.topText}</h2>\r\n      <img src={props.imgUrl} alt={props.altText} className=\"meme-img\" />\r\n      <h2 className=\"meme-text meme-bottom\">{props.bottomText}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Aside;\r\n","import React, { useState } from \"react\";\r\nimport \"../App.css\";\r\nimport Main from \"./Main\";\r\nimport Aside from \"./Aside\";\r\n\r\nfunction Container() {\r\n  const [text, setText] = useState({ topText: \"\", bottomText: \"\" });\r\n  const [imgUrl, setUrl] = useState(\"https://i.imgflip.com/30b1gx.jpg\");\r\n  const [altText, setAltText] = useState(\"\");\r\n\r\n  function enterText(event) {\r\n    const { name, value } = event.target;\r\n\r\n    setText({ ...text, [name]: value });\r\n  }\r\n\r\n  const url = \"https://api.imgflip.com/get_memes\";\r\n\r\n  function getMeme() {\r\n    const randomNumber = Math.floor(Math.random() * 100);\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setUrl(data.data.memes[randomNumber].url);\r\n        setAltText(data.data.memes[randomNumber].name);\r\n        console.log(data.data.memes[randomNumber].name);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <Main\r\n        topText={text.TopText}\r\n        enterText={enterText}\r\n        bottomText={text.bottomText}\r\n        getMeme={getMeme}\r\n      />\r\n\r\n      <Aside\r\n        topText={text.topText}\r\n        altText={altText}\r\n        bottomText={text.bottomText}\r\n        imgUrl={imgUrl}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Container;\r\n","import \"./App.css\";\nimport Header from \"./components/Header\";\nimport Container from \"./components/Container\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}